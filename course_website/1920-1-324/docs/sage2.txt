####
# An Introduction to Sage for Linear Algebra #2
# by Mckenzie West
# Last Updated: 9/5/2019
####

# A few notes before starting:
# 1. The pound/sharp/hashtag represent comments that will not be read by Sage
# 2. The code below can be copied and pasted into any instance of Sage to be run. 
#    Some options for this are:
#       - CoCalc.com ~ an online platform where you can create an account and save documents
#       - https://sagecell.sagemath.org/ ~ a simple online calculator that will not save anything.
# 3. If you have computer science experience, Sage is written using Python and all code you write will be in that language.
# 4. If you're stuck on anything, feel free to stop by my office.
#    When Googling for help, use "Sage math" instead of "Sage".

#####
# Section 1.2: Gaussian Elimination and Gauss-Jordan Elimination
#####

print("Section 1.2 of Elementary Linear Algebra by Larson")

print("\n------------------\n")

#To solve a system of equations, tell Sage each of the equations, using ==, then what variables to solve for
###
# Generating a random mxn matrix
###
# First define the size of the matrix
m = 2
n = 3
# Next define the upper and lower bounds of the entries
a = -2
b = 5
A = matrix([[randint(a,b) for i in range(n)] for j in range(m)])
print("A randomly generated matrix:")
print(A)

print("\n------------------\n")

###
# Example 5
###
print("Section 1.2 Example 5")
A = matrix([[0,1,1,-2,-3],[1,2,-1,0,2],[2,4,1,-3,-2],[1,-4,-7,-1,-19]])
print("\nStarting Matrix:")
print(A)
#Sage starts its counting at 0, so what we call row 2 is row 1 for Sage
# R1 <-> R2
A.swap_rows(0,1)
#R3-2R1 -> R3
A[2] = A[2]-2*A[0]
#R4-R1 -> R4
A[3] = A[3]-A[0]
#R4+6R2 -> R4
A[3] = A[3]+6*A[1]
#1/3 R3 -> R3
A[2] = 1/3*A[2]
#-1/13 R4 -> R4
A[3] = -1/13*A[3]
print("\nEnding Matrix")
print(A)
